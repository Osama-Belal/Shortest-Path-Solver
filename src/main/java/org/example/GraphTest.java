package org.example;


import java.util.Arrays;

import static org.junit.Assert.*;

public class GraphTest
{
    @org.junit.Test
    public void getSize()
    {
    }

    @org.junit.Test
    public void dijkstraWithUnconnectedGraph()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +
                "\\src\\main\\java\\org\\example\\" + "undirected_positive_islands.txt");
        int[] cost = new int[d1.getSize()];
        int[]  parents = new int[d1.getSize()];
        long t1 = System.currentTimeMillis();
        d1.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();
        System.out.println(t2-t1);
        int[] costSolution = new int[]{0, 100, 2, 104, 101, 1000000000, 1000000000,
            1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000};
        int[] parentSolution = new int[]{-1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void dijkstraSmallArray()
    {
        Graph d2 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1.txt");
        int[] cost = new int[d2.getSize()];
        int[]  parents = new int[d2.getSize()];
        d2.dijkstra(0, cost, parents);

        int[] costSolution = new int[]{0, 2, 4, 1, 5};
        int[] parentSolution = new int[]{-1, 0, 3, 0, 2};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void dijkstraSmallArray2()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra2.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.dijkstra(0, cost, parents);

        int[] costSolution = new int[]{0, 1000000000, 279, 200, 386, 248, 378, 389, 197, 524 };
        int[] parentSolution = new int[]{-1, 0, 3, 0, 8, 8, 5, 4, 0, 7};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void dijkstraSmallArray3()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra5.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.dijkstra(0, cost, parents);

        int[] costSolution = new int[]{0, 1, 2};
        int[] parentSolution = new int[]{-1, 0, 1};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void dijkstra100Nodes()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNoNegativeEdges.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.dijkstra(0, cost, parents);


        int[] costSolution = new int[]{0, 41, 820, 678, 532, 969, 675, 505, 731, 457, 332, 569, 865, 358, 318, 857, 491, 600, 447, 645, 933, 798, 910, 783, 153, 292, 633, 789, 485, 505, 452, 527, 596, 1016, 772, 869, 580, 507, 850, 718, 808, 651, 606, 767, 571, 259, 421, 291, 515, 443, 558, 672, 1086, 789, 734, 572, 589, 306, 641, 1005, 644, 1142, 580, 902, 542, 288, 817, 417, 411, 1126, 476, 650, 676, 936, 752, 554, 800, 452, 259, 551, 390, 391, 533, 263, 94, 892, 429, 460, 184, 616, 544, 508, 687, 477, 1059, 1179, 621, 387, 567, 426};
        int[] parentSolution = new int[]{-1,0,98,28,87,37,60,67,1,86,25,97,93,24,25,96,0,83,99,91,27,11,83,39,0,0,67,71,49,77,88,77,49,14,65,36,99,14,77,36,7,36,98,4,88,0,88,65,9,57,80,4,66,68,92,7,11,84,42,93,29,24,10,27,46,0,54,65,88,32,81,62,90,8,99,64,1,83,84,31,10,14,7,78,1,72,46,84,84,99,49,1,80,14,45,68,78,65,88,67};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void dijkstra1e6StressTest()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1e6Stress.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        long t1 = System.currentTimeMillis();
        d.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Time taken for dijkstra 1e6 nodes: " + (t2-t1) + "ms");
    }

    @org.junit.Test
    public void bellman100NodesStress()
    {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        long t1 = System.currentTimeMillis();
        d.bellmanFord(0, cost, parents);
        long t2 = System.currentTimeMillis();

        assertTrue(d.hasNegativeCycle());

        System.out.println("Time taken for bellman 100 nodes * 1000 edges: " + (t2-t1) + "ms");
    }
    @org.junit.Test
    public void bellman100NodesStressNoCycles()
    {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        int[] costSolution = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                48, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25,
                24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1};

        int[] parentSolution = new int[] {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98};

        long t1 = System.currentTimeMillis();
        d.bellmanFord(0, cost, parents);
        long t2 = System.currentTimeMillis();

        assertFalse(d.hasNegativeCycle());
        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);

        System.out.println("Time taken for bellman 100 nodes * 1000 edges: " + (t2-t1) + "ms");
    }
    @org.junit.Test
    public void bellman1000NodesStress()
    {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "1000NodesWithNegativeEdges.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        long t1 = System.currentTimeMillis();
        d.bellmanFord(0, cost, parents);
        long t2 = System.currentTimeMillis();
        assertTrue(d.hasNegativeCycle());

        System.out.println("Time taken for bellman 1000 nodes: " + (t2-t1) + "ms");
    }
    @org.junit.Test
    public void BellmanSmall(){
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "bellmansmall.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        long t1 = System.currentTimeMillis();
        d.bellmanFord(0, cost, parents);
        long t2 = System.currentTimeMillis();
//        assertArrayEquals(costSolution, cost);
//        assertArrayEquals(parentSolution, parents);
        assertTrue(d.hasNegativeCycle());

        System.out.println("Time taken for bellman: " + (t2-t1) + "ms");
    }
    @org.junit.Test
    public void FloydSmall(){
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "bellmansmall.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        long t1 = System.currentTimeMillis();
        d.floydWarshall(cost, parents);
        long t2 = System.currentTimeMillis();
        assertTrue(d.hasNegativeCycle());

        System.out.println("Time taken for bellman: " + (t2-t1) + "ms");
    }

   @org.junit.Test
    public void floyd100Nodes()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        long t1 = System.currentTimeMillis();
        d.floydWarshall(cost, parents);
        long t2 = System.currentTimeMillis();

        assertTrue(d.hasNegativeCycle());
        System.out.println("Time taken for floyd 100 nodes: " + (t2-t1) + "ms");
    }

    @org.junit.Test
    public void floyd100NodesStressNoCycles()
    {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        int[][] costSolution = new int[][] {
                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1},
                {999999998, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2},
                {999999997, 999999997, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3},
                {999999996, 999999996, 999999996, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4},
                {999999995, 999999995, 999999995, 999999995, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5},
                {999999994, 999999994, 999999994, 999999994, 999999994, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6},
                {999999993, 999999993, 999999993, 999999993, 999999993, 999999993, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7},
                {999999992, 999999992, 999999992, 999999992, 999999992, 999999992, 999999992, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8},
                {999999991, 999999991, 999999991, 999999991, 999999991, 999999991, 999999991, 999999991, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9},
                {999999990, 999999990, 999999990, 999999990, 999999990, 999999990, 999999990, 999999990, 999999990, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10},
                {999999989, 999999989, 999999989, 999999989, 999999989, 999999989, 999999989, 999999989, 999999989, 999999989, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11},
                {999999988, 999999988, 999999988, 999999988, 999999988, 999999988, 999999988, 999999988, 999999988, 999999988, 999999988, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12},
                {999999987, 999999987, 999999987, 999999987, 999999987, 999999987, 999999987, 999999987, 999999987, 999999987, 999999987, 999999987, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13},
                {999999986, 999999986, 999999986, 999999986, 999999986, 999999986, 999999986, 999999986, 999999986, 999999986, 999999986, 999999986, 999999986, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14},
                {999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 999999985, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15},
                {999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 999999984, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16},
                {999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 999999983, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17},
                {999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 999999982, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18},
                {999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 999999981, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19},
                {999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 999999980, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20},
                {999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 999999979, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21},
                {999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 999999978, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22},
                {999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 999999977, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23},
                {999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24},
                {999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 999999975, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25},
                {999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 999999974, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26},
                {999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 999999973, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27},
                {999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 999999972, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28},
                {999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 999999971, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29},
                {999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 999999970, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30},
                {999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 999999969, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31},
                {999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 999999968, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32},
                {999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 999999967, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33},
                {999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 999999966, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34},
                {999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 999999965, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35},
                {999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 999999964, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36},
                {999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 999999963, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37},
                {999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 999999962, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38},
                {999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 999999961, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39},
                {999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 999999960, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40},
                {999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 999999959, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41},
                {999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 999999958, 0, 1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42},
                {999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 999999957, 0, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43},
                {999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 999999956, 0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44},
                {999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 999999955, 0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999976, 999999975, 999999974, 999999973, 999999972, 999999971, 999999970, 999999969, 999999968, 999999967, 999999966, 999999965, 999999964, 999999963, 999999962, 999999961, 999999960, 999999959, 999999958, 999999957, 999999956, 999999955, 999999954, 999999953, 999999952, 999999951, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
        };

        long t1 = System.currentTimeMillis();
        d.floydWarshall(cost, parents);
        long t2 = System.currentTimeMillis();
        assertFalse(d.hasNegativeCycle());
        assertTrue(Arrays.deepEquals(costSolution, cost));
        System.out.println("Time taken for floyd 100 nodes " + (t2-t1) + "ms");
    }

    @org.junit.Test
    public void bellmanWithUnconnectedGraph()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +
                "\\src\\main\\java\\org\\example\\" + "undirected_positive_islands.txt");
        int[] cost = new int[d1.getSize()];
        int[]  parents = new int[d1.getSize()];
        long t1 = System.currentTimeMillis();
        d1.bellmanFord(0, cost, parents);
        long t2 = System.currentTimeMillis();
        System.out.println(t2-t1);
        int[] costSolution = new int[]{0, 100, 2, 104, 101, 1000000000, 1000000000,
                1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000};
        int[] parentSolution = new int[]{-1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void bellmanSmallArray()
    {
        Graph d2 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1.txt");
        int[] cost = new int[d2.getSize()];
        int[]  parents = new int[d2.getSize()];
        d2.bellmanFord(0, cost, parents);

        int[] costSolution = new int[]{0, 2, 4, 1, 5};
        int[] parentSolution = new int[]{-1, 0, 3, 0, 2};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void bellmanSmallArray2()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra2.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.bellmanFord(0, cost, parents);


        int[] costSolution = new int[]{0, 1000000000, 279, 200, 386, 248, 378, 389, 197, 524 };
        int[] parentSolution = new int[]{-1, 0, 3, 0, 8, 8, 5, 4, 0, 7};

        assertArrayEquals(costSolution, cost);
//        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void bellmanSmallArray3()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra5.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.bellmanFord(0, cost, parents);


        int[] costSolution = new int[]{0, 1, 2};
        int[] parentSolution = new int[]{-1, 0, 1};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void floydWithUnconnectedGraph()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +
                "\\src\\main\\java\\org\\example\\" + "undirected_positive_islands.txt");
        int[][] cost = new int[d1.getSize()][d1.getSize()];
        int[][]  parents = new int[d1.getSize()][d1.getSize()];
        long t1 = System.currentTimeMillis();
        d1.floydWarshall( cost, parents);
        long t2 = System.currentTimeMillis();
        System.out.println(t2-t1);

        int[][] costSolution = new int[][] {{0, 100, 2, 104, 101, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {100, 0, 102, 4, 1, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {2, 102, 0, 106, 103, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {104, 4, 106, 0, 3, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {101, 1, 103, 3, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1, 3, 3, 8, 7, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1, 0, 2, 2, 7, 6, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 3, 2, 0, 3, 8, 4, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 3, 2, 3, 0, 5, 7, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 8, 7, 8, 5, 0, 12, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 7, 6, 4, 7, 12, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0 }};

        int[][] parentSolution = new int[][] {{0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {1, 3, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {1, 4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 0, 5, 6, 6, 8, 7, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 6, 0, 6, 6, 8, 7, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 6, 7, 0, 7, 8, 7, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 6, 8, 8, 0, 8, 7, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 8, 8, 8, 9, 0, 8, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 7, 7, 10, 7, 8, 0, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }
        };

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void floydSmallArray()
    {
        Graph d2 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1.txt");
        int[][] cost = new int[d2.getSize()][d2.getSize()];
        int[][]  parents = new int[d2.getSize()][d2.getSize()];
        d2.floydWarshall(cost, parents);

        int[][] costSolution = new int[][] {{0, 2, 4, 1, 5 }, {2, 0, 4, 3, 5 }, {4, 4, 0, 3, 1 }, {1, 3, 3, 0, 4 }, {5, 5, 1, 4, 0 }};
        int[][] parentSolution = new int[][] {{0, 0, 3, 0, 3 }, {1, 0, 1, 0, 1 }, {3, 2, 0, 2, 2 }, {3, 0, 3, 0, 2 }, {3, 4, 4, 2, 0 }};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void floydSmallArray2()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra2.txt");
        int[][] cost = new int[d1.getSize()][d1.getSize()];
        int[][]  parents = new int[d1.getSize()][d1.getSize()];
        d1.floydWarshall(cost, parents);

        int[][] costSolution = new int[][]
                {{0, 1000000000, 279, 200, 386, 248, 378, 389, 197, 524 },
                {1000000000, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {279, 1000000000, 0, 79, 213, 149, 279, 216, 200, 351 },
                {200, 1000000000, 79, 0, 292, 228, 358, 295, 279, 430 },
                {386, 1000000000, 213, 292, 0, 240, 370, 3, 189, 138 },
                {248, 1000000000, 149, 228, 240, 0, 130, 243, 51, 378 },
                {378, 1000000000, 279, 358, 370, 130, 0, 373, 181, 508 },
                {389, 1000000000, 216, 295, 3, 243, 373, 0, 192, 135 },
                {197, 1000000000, 200, 279, 189, 51, 181, 192, 0, 327 },
                {524, 1000000000, 351, 430, 138, 378, 508, 135, 327, 0 }};

        int[][] parentSolution = new int[][] {{0, 0, 3, 0, 8, 8, 8, 8, 0, 8 }, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {3, 0, 0, 2, 2, 2, 5, 4, 5, 7 }, {3, 0, 3, 0, 2, 2, 5, 4, 5, 7 },
                {8, 0, 4, 2, 0, 8, 8, 4, 4, 7 }, {8, 0, 5, 2, 8, 0, 5, 8, 5, 8 },
                {8, 0, 5, 5, 8, 6, 0, 8, 5, 8 }, {8, 0, 4, 4, 7, 8, 8, 0, 4, 7 },
                {8, 0, 5, 5, 8, 8, 5, 4, 0, 7 }, {8, 0, 7, 7, 7, 8, 8, 9, 7, 0 }
        };

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void floydSmallArray3()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra5.txt");
        int[][] cost = new int[d1.getSize()][d1.getSize()];
        int[][]  parents = new int[d1.getSize()][d1.getSize()];
        d1.floydWarshall(cost, parents);
        int[][] costSolution = new int[][]{{0, 1, 2}, {1, 0, 1}, {2, 1, 0}};
        int[][] parentSolution = new int[][]{{0, 0, 1}, {1, 0, 1}, {1, 2, 0}};
        assertTrue(Arrays.deepEquals(costSolution, cost));
        assertTrue(Arrays.deepEquals(parentSolution, parents));
    }

    @org.junit.Test
    public void hasNegativeCycleBellman() {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.bellmanFord(1, cost, parents);
        assertTrue(d.hasNegativeCycle());
    }

    @org.junit.Test
    public void hasNegativeCycleBellman2()
    {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        d.bellmanFord(1, cost, parents);

        assertFalse(d.hasNegativeCycle());
    }

    @org.junit.Test
    public void hasNegativeCycleFloyd() {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        d.floydWarshall(cost, parents);
        assertTrue(d.hasNegativeCycle());
    }

    @org.junit.Test
    public void hasNegativeCycleFloyd2()
    {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        d.floydWarshall(cost, parents);
        assertFalse(d.hasNegativeCycle());
    }

    @org.junit.Test
    public void allPairs1(){
        Graph graph = new Graph(System.getProperty("user.dir") + "\\src\\main\\java\\org\\example\\" + "undirected_positive_islands.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs1 time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void allPairs2(){
        Graph graph = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs1 time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void allPairs3(){
        Graph graph = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra2.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs1 time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void allPairs4(){
        Graph graph = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra5.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs1 time "+(t2-t1)+" ms");
    }


    @org.junit.Test
    public void allPairs5(){
        Graph graph = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNoNegativeEdges.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs1 time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void allPairs6(){
        Graph graph = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra5.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs1 time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void allPairs7(){
        //negative cycle
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        boolean hasNegativeCycle = graph.floydWarshall(allPairsCosts, allPairsPredecessors);
        if (!hasNegativeCycle) {
            System.out.println("Graph contains negative cycle.");
        }
        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        hasNegativeCycle =true;
        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");

    }

    @org.junit.Test
    public void allPairs8(){
        //no negative cycle
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        boolean hasNegativeCycle = graph.floydWarshall(allPairsCosts, allPairsPredecessors);
        if (!hasNegativeCycle) {
            System.out.println("Graph contains negative cycle.");
        }
        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        hasNegativeCycle =true;
        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");

    }

    @org.junit.Test
    public void allPairs9(){
        // negative cycle bellman found the cycle first
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "1000NodesWithNegativeEdges.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");
        long t1 = System.currentTimeMillis();

        boolean hasNegativeCycle = graph.floydWarshall(allPairsCosts, allPairsPredecessors);
        if (!hasNegativeCycle) {
            System.out.println("Graph contains negative cycle.");
        }
        long t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs1 time "+(t2-t1)+" ms");

        hasNegativeCycle =true;
        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs1 time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "10.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra density=2 size 10 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman density=2 size 10 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall density=2 size 10 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare1(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "100.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra density=2 size 100 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman density=2 size 100 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall density=2 size 100 node "+(t2-t1)+" ms");
    }
    @org.junit.Test
    public void compare2(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "500.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra density=2 size 500 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman density=2 size 500 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall density=2 size 500 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare3(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "1000.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra density=2 size 1000 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman density=2 size 1000 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall density=2 size 1000 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare4(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "750.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra density=2 size 750 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman density=2 size 750 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall density=2 size 750 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare5(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "50.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra density=2 size 50 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman density=2 size 50 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall density=2 size 50 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare6(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "output.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra complete graph size 1000 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman complete graph size 1000 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall complete graph size 1000 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare7(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "10.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra complete graph size 10 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman complete graph size 10 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall complete graph size 10 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare8(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "100.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra complete graph size 100 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman complete graph size 100 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall complete graph size 100 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare9(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "50.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra complete graph size 50 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman complete graph size 50 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall complete graph size 50 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare10(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "500.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra complete graph size 500 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman complete graph size 500 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall complete graph size 500 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare11(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "750.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra complete graph size 750 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman complete graph size 750 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall complete graph size 750 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare12(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "10.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra 50% graph size 10 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman 50% graph size 10 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall 50% graph size 10 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare13(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "50.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra 50% graph size 50 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman 50% graph size 50 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall 50% graph size 50 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare14(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "100.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra 50% graph size 100 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman 50% graph size 100 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall 50% graph size 100 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare15(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "500.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra 50% graph size 500 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman 50% graph size 500 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall 50% graph size 500 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare16(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "750.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra 50% graph size 750 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman 50% graph size 750 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall 50% graph size 750 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare17(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "1000.txt");
        int[] cost = new int[graph.getSize()];
        int[]  parents = new int[graph.getSize()];

        int[][] cost2 = new int[graph.getSize()][graph.getSize()];
        int[][]  parents2 = new int[graph.getSize()][graph.getSize()];

        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        graph.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Dijkstra 50% graph size 1000 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.bellmanFord(0,cost,parents);
        t2 = System.currentTimeMillis();

        System.out.println("Bellman 50% graph size 1000 node "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        graph.floydWarshall(cost2,parents2);
        t2 = System.currentTimeMillis();

        System.out.println("FloydWarshall 50% graph size 1000 node "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare18(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "10.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs density=2 size 10 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs density=2 size 10 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs density=2 size 10 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare19(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "50.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs density=2 size 50 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs density=2 size 50 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs density=2 size 50 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare20(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "100.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs density=2 size 100 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs density=2 size 100 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs density=2 size 100 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare21(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "150.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs density=2 size 150 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs density=2 size 150 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs density=2 size 150 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare22(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "200.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs density=2 size 200 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs density=2 size 200 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs density=2 size 200 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare23(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\2\\" + "250.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs density=2 size 250 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs density=2 size 250 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs density=2 size 250 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare24(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "10.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs 50% size 10 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs 50% size 10 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs 50% size 10 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare25(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "50.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs 50% size 50 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs 50% size 50 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs 50% size 50 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare26(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "100.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs 50% size 100 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs 50% size 100 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs 50% size 100 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare27(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "150.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs 50% size 150 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs 50% size 150 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs 50% size 150 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare28(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "200.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs 50% size 200 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs 50% size 200 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs 50% size 200 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare29(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\50%\\" + "250.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs 50% size 250 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs 50% size 250 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs 50% size 250 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare30(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "10.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs complete size 10 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs complete size 10 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs complete size 10 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare31(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "50.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs complete size 50 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs complete size 50 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs complete size 50 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare32(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "100.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs complete size 100 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs complete size 100 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs complete size 100 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare33(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "150.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs complete size 150 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs complete size 150 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs complete size 150 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare34(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "200.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs complete size 200 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs complete size 200 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs complete size 200 node time "+(t2-t1)+" ms");
    }

    @org.junit.Test
    public void compare35(){
        Graph graph = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\Density\\complete\\" + "250.txt");
        int[][] allPairsCosts = new int[graph.getSize()][graph.getSize()];
        int[][] allPairsPredecessors = new int[graph.getSize()][graph.getSize()];
        System.out.println("#########################################################################");

        long t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            graph.dijkstra(i, allPairsCosts[i], allPairsPredecessors[i]);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("Dijkstra all pairs complete size 250 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();
        for (int i = 0; i < graph.getSize(); i++) {
            boolean hasNegativeCycle = graph.bellmanFord(i, allPairsCosts[i], allPairsPredecessors[i]);
            if (!hasNegativeCycle) {
                System.out.println("Graph contains negative cycle.");
                break;
            }
        }
        t2 = System.currentTimeMillis();
        System.out.println("Bellman all pairs complete size 250 node time "+(t2-t1)+" ms");

        t1 = System.currentTimeMillis();

        graph.floydWarshall(allPairsCosts, allPairsPredecessors);

        t2 = System.currentTimeMillis();
        System.out.println("FloydWarshall all pairs complete size 250 node time "+(t2-t1)+" ms");
    }
}
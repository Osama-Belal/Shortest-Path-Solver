package org.example;

import org.junit.jupiter.api.BeforeEach;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import static java.lang.Boolean.TRUE;
import static org.junit.Assert.*;

public class GraphTest
{
    @org.junit.Test
    public void getSize()
    {
    }

    @org.junit.Test
    public void dijkstraWithUnconnectedGraph()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +
                "\\src\\main\\java\\org\\example\\" + "undirected_positive_islands.txt");
        int[] cost = new int[d1.getSize()];
        int[]  parents = new int[d1.getSize()];
        d1.dijkstra(0, cost, parents);

        int[] costSolution = new int[]{0, 100, 2, 104, 101, 1000000000, 1000000000,
            1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000};
        int[] parentSolution = new int[]{-1, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void dijkstraSmallArray()
    {
        Graph d2 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1.txt");
        int[] cost = new int[d2.getSize()];
        int[]  parents = new int[d2.getSize()];
        d2.dijkstra(0, cost, parents);

        int[] costSolution = new int[]{0, 2, 4, 1, 5};
        int[] parentSolution = new int[]{-1, 0, 3, 0, 2};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void dijkstraSmallArray2()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra2.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.dijkstra(0, cost, parents);

        int[] costSolution = new int[]{0, 1000000000, 279, 200, 386, 248, 378, 389, 197, 524 };
        int[] parentSolution = new int[]{-1, 0, 3, 0, 8, 8, 5, 4, 0, 7};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void dijkstraSmallArray3()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra5.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.dijkstra(0, cost, parents);

        int[] costSolution = new int[]{0, 1, 2};
        int[] parentSolution = new int[]{-1, 0, 1};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void dijkstra100Nodes()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNoNegativeEdges.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.dijkstra(0, cost, parents);


        int[] costSolution = new int[]{0, 41, 820, 678, 532, 969, 675, 505, 731, 457, 332, 569, 865, 358, 318, 857, 491, 600, 447, 645, 933, 798, 910, 783, 153, 292, 633, 789, 485, 505, 452, 527, 596, 1016, 772, 869, 580, 507, 850, 718, 808, 651, 606, 767, 571, 259, 421, 291, 515, 443, 558, 672, 1086, 789, 734, 572, 589, 306, 641, 1005, 644, 1142, 580, 902, 542, 288, 817, 417, 411, 1126, 476, 650, 676, 936, 752, 554, 800, 452, 259, 551, 390, 391, 533, 263, 94, 892, 429, 460, 184, 616, 544, 508, 687, 477, 1059, 1179, 621, 387, 567, 426};
        int[] parentSolution = new int[]{-1,0,98,28,87,37,60,67,1,86,25,97,93,24,25,96,0,83,99,91,27,11,83,39,0,0,67,71,49,77,88,77,49,14,65,36,99,14,77,36,7,36,98,4,88,0,88,65,9,57,80,4,66,68,92,7,11,84,42,93,29,24,10,27,46,0,54,65,88,32,81,62,90,8,99,64,1,83,84,31,10,14,7,78,1,72,46,84,84,99,49,1,80,14,45,68,78,65,88,67};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void dijkstra1e6StressTest()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1e6Stress.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        long t1 = System.currentTimeMillis();
        d.dijkstra(0, cost, parents);
        long t2 = System.currentTimeMillis();

        System.out.println("Time taken for dijkstra 1e6 nodes: " + (t2-t1) + "ms");
    }

    @org.junit.Test
    public void bellman100NodesStress()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        int[] costSolution = new int[]{-44524024, -44536106, -44526972, -44517875, -44525648, -44524270, -44524249,
                -44528500, -44543923, -44525816, -44496558, -44550590, -44521006, -44515443, -44519418, -44552896,
                -44496693, -44545817, -44508925, -44524078, -44515766, -44508849, -44522627, -44524019, -44534626,
                -44513428, -44529682, -44528046, -44521624, -44546777, -44521177, -44514087, -44519629, -44524177,
                -44537106, -44530217, -44520854, -44520166, -44510407, -44547915, -44521389, -44511194, -44543684,
                -44545397, -44524717, -44543997, -44513299, -44521858, -44513414, -44524001, -44509330, -44508635,
                -44534477, -44518072, -44519742, -44509996, -44521427, -44513393, -44504554, -44528211, -44532994,
                -44511980, -44508455, -44511088, -44506344, -44549117, -44534552, -44540652, -44514785, -44521738,
                -44542059, -44523119, -44515243, -44536629, -44505688, -44520374, -44540354, -44537530, -44507879,
                -44508929, -44554610, -44529117, -44508952, -44494172, -44523016, -44535413, -44523330, -44523331,
                -44511913, -44505624, -44519353, -44527721, -44520877, -44515372, -44527827, -44535748, -44526549,
                -44512855, -44536802, -44539406};

        int[] parentSolution = new int[] {61, 30, 35, 54, 34, 93, 41, 27, 25, 92, 5, 44, 15, 55, 70, 46, 56, 100, 7, 53, 78, 70, 18, 1, 74, 15, 53, 99,
                8, 68, 99, 99, 27, 74, 18, 53, 8, 92, 1, 77, 61, 82, 96, 12, 86, 16, 36, 57, 2, 24, 48, 13, 36, 87, 14, 93, 43, 70, 69,
                81, 1, 27, 16, 24, 33, 12, 99, 77, 66, 60, 86, 96, 64, 25, 35, 13, 68, 86, 36, 87, 44, 18, 34, 59, 100, 78, 54, 55, 93,
                50, 41, 8, 6, 99, 92, 74, 8, 16, 74, 18};

        long t1 = System.currentTimeMillis();
        d.bellmanFord(0, cost, parents);
        long t2 = System.currentTimeMillis();

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
        assertTrue(d.hasNegativeCycle());

        System.out.println("Time taken for bellman 100 nodes * 1000 edges: " + (t2-t1) + "ms");
    }
    @org.junit.Test
    public void bellman100NodesStressNoCycles()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        int[] costSolution = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
                30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39,
                38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,
                8, 7, 6, 5, 4, 3, 2, 1, 0, -1};

        int[] parentSolution = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
                30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
                90, 91, 92, 93, 94, 95, 96, 97, 98, 99};

        long t1 = System.currentTimeMillis();
        d.bellmanFord(1, cost, parents);
        long t2 = System.currentTimeMillis();

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
        assertFalse(d.hasNegativeCycle());

        System.out.println("Time taken for bellman 100 nodes * 1000 edges: " + (t2-t1) + "ms");
    }
    @org.junit.Test
    public void bellman1000NodesStress()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "1000NodesWithNegativeEdges.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        int[] costSolution = new int[] {-104941814, -104924695, -104970364, -104945344, -104948583, -104965879, -104947190, -104954730, -104933882, -
                104963480, -104946574, -104969342, -104947138, -104951943, -104956022, -104946975, -104953072, -104959994, -104959352, -
                104927409, -104967525, -104946499, -104943576, -104914902, -104934053, -104941479, -104957000, -104948484, -104957565, -
                104938835, -104935835, -104948969, -104932649, -104943731, -104940882, -104951335, -104931025, -104947562, -104963751, -
                104939998, -104931907, -104951032, -104938462, -104943398, -104927900, -104938287, -104917586, -104946909, -104942002, -
                104968591, -104933748, -104923022, -104967815, -104984095, -104958303, -104916962, -104956419, -104961322, -104944806, -
                104939309, -104955199, -104926267, -104936630, -104914179, -104983025, -104936647, -104922356, -104962696, -104946537, -
                104930455, -104934828, -104946721, -104940347, -104971192, -104953064, -104936829, -104945454, -104940242, -104948069, -
                104943070, -104934001, -104970501, -104938135, -104925921, -104919291, -104960929, -104969015, -104937271, -104941989, -
                104947423, -104947756, -104979132, -104920528, -104946016, -104945829, -104944855, -104953673, -104965610, -104932408, -
                104942222, -104947879, -104945884, -104929873, -104968803, -104941778, -104957557, -104942991, -104930714, -104956225, -
                104925204, -104942002, -104974469, -104921401, -104921852, -104938107, -104943882, -104950629, -104947222, -104944312, -
                104953432, -104935778, -104944101, -104915858, -104937795, -104921922, -104954214, -104949517, -104971607, -104922729, -
                104949591, -104938051, -104930127, -104959795, -104912336, -104968129, -104947572, -104981629, -104932587, -104936960, -
                104912774, -104951094, -104937029, -104929245, -104943823, -104912861, -104963048, -104923495, -104969132, -104911701, -
                104966421, -104933933, -104920051, -104975893, -104928796, -104940839, -104920657, -104920534, -104956078, -104975552, -
                104959756, -104925713, -104952194, -104940224, -104960092, -104950414, -104926675, -104944068, -104930432, -104932407, -
                104956310, -104968633, -104941834, -104972988, -104970055, -104940442, -104916934, -104909257, -104940247, -104948235, -
                104934568, -104912967, -104941907, -104931968, -104949239, -104947367, -104918025, -104933311, -104956958, -104954641, -
                104948384, -104949906, -104914355, -104978138, -104939646, -104960302, -104974256, -104946660, -104945130, -104974699, -
                104977555, -104965352, -104988083, -104938831, -104924658, -104968071, -104963453, -104951968, -104971242, -104950228, -
                104949059, -104938068, -104965807, -104947139, -104941354, -104945456, -104962269, -104925655, -104930958, -104959697, -
                104965432, -104942760, -104945617, -104988999, -104962050, -104945449, -104935626, -104958800, -104982403, -104973288, -
                104930971, -104959601, -104969287, -104956432, -104939543, -104944410, -104942344, -104982193, -104955239, -104931190, -
                104927907, -104958217, -104942377, -104952840, -104922164, -104895056, -104946571, -104922921, -104968089, -104948316, -
                104952901, -104940796, -104984209, -104962297, -104959044, -104966740, -104962733, -104936660, -104944338, -104934670, -
                104945595, -104954641, -104904257, -104947225, -104914593, -104928179, -104943391, -104933416, -104934838, -104951246, -
                104956353, -104925970, -104928689, -104950660, -104954189, -104939836, -104960813, -104933243, -104953800, -104972180, -
                104942639, -104936774, -104958556, -104944135, -104966153, -104975458, -104930197, -104983709, -104972586, -104920765, -
                104925577, -104944424, -104948098, -104942055, -104950415, -104958669, -104938436, -104966347, -104948020, -104963137, -
                104938121, -104966423, -104950706, -104889477, -104953659, -104936373, -104915320, -104957779, -104961249, -104969536, -
                104941147, -104963771, -104949016, -104921246, -104952560, -104947201, -104933783, -104955572, -104925123, -104949335, -
                104939962, -104960782, -104969242, -104961463, -104957397, -104940895, -104953199, -104922596, -104942497, -104928026, -
                104965350, -104953932, -104967708, -104928525, -104978779, -104963289, -104918213, -104934894, -104929649, -104941141, -
                104961059, -104935668, -104969085, -104986151, -104950767, -104980019, -104933198, -104940841, -104960772, -104973524, -
                104948535, -104959141, -104981324, -104974584, -104947770, -104959032, -104972773, -104946102, -104914512, -104944203, -
                104955840, -104924153, -104954711, -104941926, -104936192, -104938151, -104940552, -104926395, -104966964, -104950816, -
                104940010, -104953509, -104953741, -104945541, -104950783, -104910578, -104944326, -104936955, -104956373, -104971596, -
                104894624, -104938891, -104927817, -104926759, -104949557, -104921670, -104956420, -104952730, -104959176, -104949823, -
                104943836, -104960289, -104954536, -104939564, -104974984, -104959560, -104929413, -104926814, -104978730, -104962390, -
                104936346, -104939910, -104926603, -104944970, -104953621, -104930753, -104968478, -104942708, -104955246, -104936139, -
                104946610, -104958703, -104972782, -104949646, -104948214, -104936149, -104966273, -104962409, -104926783, -104939085, -
                104976587, -104968009, -104946706, -104975249, -104911967, -104932199, -104933989, -104955746, -104964547, -104944726, -
                104948900, -104959568, -104975952, -104911187, -104970066, -104948127, -104936244, -104927739, -104948031, -104950270, -
                104973355, -104928613, -104934341, -104946282, -104947368, -104979394, -104944372, -104958465, -104976998, -104966015, -
                104960879, -104966412, -104920998, -104933827, -104946456, -104962645, -104967991, -104944718, -104911917, -104969522, -
                104901738, -104964737, -104957936, -104912221, -104925536, -104951577, -104964885, -104954303, -104949194, -104933088, -
                104919699, -104946816, -104965083, -104990368, -104954280, -104961349, -104948831, -104932536, -104940979, -104922126, -
                104944103, -104947712, -104953027, -104967045, -104953829, -104939693, -104946535, -104929929, -104921334, -104947408, -
                104942005, -104953218, -104940070, -104947499, -104948150, -104930754, -104963656, -104946849, -104947081, -104955191, -
                104930290, -104942943, -104919976, -104980742, -104938559, -104950272, -104974276, -104936953, -104946699, -104930314, -
                104966863, -104926019, -104906926, -104937636, -104948699, -104991960, -104920666, -104946684, -104932340, -104951363, -
                104973189, -104921428, -104955029, -104956260, -104959512, -104966547, -104942517, -104921139, -104926800, -104931481, -
                104952173, -104940660, -104946369, -104963459, -104968540, -104927226, -104981779, -104993464, -104946846, -104939260, -
                104936557, -104946912, -104955888, -104914495, -104943123, -104936289, -104940333, -104981280, -104954314, -104944252, -
                104947209, -104948077, -104936399, -104961522, -104903895, -104933598, -104929905, -104967644, -104938164, -104964489, -
                104993344, -104910381, -104970076, -104944254, -104973829, -104943698, -104961658, -104944281, -104960775, -104960277, -
                104928526, -104947848, -104933749, -104942435, -104968603, -104970146, -104933352, -104952205, -104952683, -104956331, -
                104950223, -104975758, -104931469, -104954385, -104948783, -104953544, -104932807, -104941055, -104979244, -104938314, -
                104932649, -104925306, -104937775, -104947981, -104964236, -104939051, -104956870, -104952634, -104936228, -104946133, -
                104918880, -104971613, -104929191, -104948097, -104951223, -104960971, -104942471, -104956748, -104961735, -104918638, -
                104961401, -104964365, -104946579, -104952142, -104964709, -104967054, -104931533, -104952046, -104945085, -104925973, -
                104952617, -104937522, -104942922, -104928928, -104955794, -104936415, -104951242, -104946536, -104980907, -104949034, -
                104959698, -104924135, -104965419, -104955629, -104959371, -104981367, -104976876, -104950467, -104944614, -104943042, -
                104955470, -104931575, -104950074, -104940800, -104951357, -104908216, -104926506, -104921974, -104948530, -104913174, -
                104952615, -104943248, -104952601, -104944088, -104982224, -104934238, -104981008, -104968360, -104945450, -104945851, -
                104956156, -104928478, -104963164, -104956061, -104962401, -104908813, -104928526, -104947711, -104950181, -104945425, -
                104956605, -104931584, -104955998, -104929182, -104919928, -104985076, -104955409, -104959181, -104974348, -104957257, -
                104932166, -104945179, -104971572, -104948791, -104953533, -104951699, -104941482, -104957422, -104934640, -104941497, -
                104905130, -104961487, -104960011, -104987039, -104919564, -104960176, -104976731, -104935600, -104933991, -104927118, -
                104960111, -104974033, -104948176, -104963858, -104958216, -104959963, -104933081, -104946075, -104974079, -104947952, -
                104972720, -104959609, -104947624, -104943796, -104955829, -104950984, -104919907, -104924181, -104965509, -104926427, -
                104957472, -104953443, -104934159, -104943774, -104968421, -104930396, -104973056, -104954670, -104937996, -104936701, -
                104956016, -104982190, -104944367, -104928839, -104928267, -104965923, -104977432, -104940898, -104938882, -104942847, -
                104951620, -104974615, -104942689, -104952263, -104950719, -104912324, -104945836, -104943232, -104967715, -104921633, -
                104946859, -104936195, -104972895, -104978609, -104970270, -104938609, -104942792, -104965080, -104945828, -104917565, -
                104946813, -104924592, -104954313, -104964351, -104949905, -104928435, -104954669, -104956878, -104942870, -104905760, -
                104952232, -104933665, -104943205, -104930934, -104964887, -104957602, -104943177, -104926988, -104955111, -104970513, -
                104918659, -104981593, -104953689, -104964657, -104897443, -104965702, -104955030, -104949210, -104962202, -104946030, -
                104956455, -104936648, -104930099, -104956277, -104933897, -104951218, -104968033, -104963775, -104959869, -104924942, -
                104984519, -104953604, -104956098, -104932487, -104955131, -104960754, -104941445, -104933885, -104980269, -104942782, -
                104961710, -104936245, -104926541, -104933466, -104983860, -104948662, -104949447, -104908640, -104940691, -104928935, -
                104968940, -104920996, -104937413, -104952618, -104932833, -104965013, -104921729, -104926341, -104947215, -104958612, -
                104945628, -104949161, -104943658, -104961013, -104939108, -104944624, -104947538, -104951319, -104953143, -104923503, -
                104940094, -104928736, -104943157, -104935235, -104926745, -104917599, -104987682, -104926082, -104969117, -104976424, -
                104944303, -104938930, -104930647, -104961637, -104962790, -104943000, -104953017, -104952511, -104993176, -104964751, -
                104939921, -104928861, -104970165, -104919608, -104936981, -104937088, -104924626, -104931704, -104950369, -104950124, -
                104986625, -104947110, -104942884, -104947042, -104914194, -104963067, -104967365, -104973782, -104940152, -104952627, -
                104949931, -104946322, -104959669, -104913866, -104967730, -104931128, -104936620, -104973781, -104927345, -104976463, -
                104914055, -104921327, -104940419, -104915891, -104940158, -104939258, -104952371, -104941931, -104970950, -104950653, -
                104954277, -104965534, -104963365, -104939966, -104971861, -104952851, -104925811, -104981483, -104921105, -104971503, -
                104956002, -104926825, -104941887, -104938806, -104940854, -104961192, -104946970, -104974223, -104992855, -104935735, -
                104968284, -104949494, -104934703, -104952025, -104954247, -104950919, -104961536, -104930266, -104964293, -104932545, -
                104930258, -104943650, -104923796, -104961442, -104943657, -104932014, -104960626, -104947842, -104950341, -104960851, -
                104946177, -104911287, -104967570, -104964290, -104944495, -105002965, -104923594, -104956599, -104938889, -104950332, -
                104918820, -104915973, -104981270, -104932746, -104936401, -104934280, -104916702, -104942158, -104979491, -104964296, -
                104953378, -104958026, -104940743, -104929553, -104942397, -104944654, -104947020, -104930828, -104937974, -104944283, -
                104945649, -104952266, -104952198, -104941928, -104960317, -104936084, -104955902, -104934112, -104920091, -104969733, -
                104947528, -104941761, -104947729, -104965037, -104941047, -104954912, -104967216, -104942728, -104941419, -104934169, -
                104951367, -104933569, -104952393, -104974589, -104925929, -104970421, -104958558, -104962616, -104945211, -104919497, -
                104949458};

        int[] parentSolution = new int[] {5, 856, 399, 410, 775, 775, 569, 227, 3, 985, 704, 536, 35, 620, 596, 61, 416, 856, 461, 459, 560, 557, 895,
                914, 92, 446, 160, 785, 416, 805, 354, 854, 565, 691, 13, 249, 838, 220, 748, 704, 105, 805, 611, 319, 48, 466, 464, 158
                , 354, 594, 545, 865, 148, 731, 421, 188, 423, 710, 880, 606, 630, 453, 673, 417, 515, 534, 537, 515, 974, 258, 70, 683,
                364, 342, 899, 36, 238, 373, 740, 720, 722, 159, 523, 159, 479, 585, 559, 476, 305, 308, 308, 800, 962, 917, 115, 360,
                562, 378, 513, 417, 606, 447, 500, 662, 972, 476, 185, 269, 648, 774, 565, 887, 525, 539, 246, 443, 251, 87, 763, 996, 998,
                107, 317, 450, 570, 691, 825, 726, 30, 768, 915, 99, 548, 555, 216, 848, 701, 227, 426, 142, 692, 710, 453, 312, 706
                , 308, 494, 53, 82, 475, 487, 605, 654, 471, 288, 688, 894, 48, 82, 27, 807, 691, 51, 605, 700, 21, 926, 271, 442, 695,
                682, 622, 753, 958, 534, 826, 73, 856, 868, 189, 816, 213, 16, 416, 659, 259, 171, 408, 633, 57, 805, 208, 870, 864, 348
                , 952, 158, 579, 252, 202, 926, 635, 35, 180, 800, 735, 993, 993, 481, 854, 878, 736, 757, 971, 593, 672, 661, 480, 456,
                342, 36, 68, 445, 607, 834, 499, 8, 536, 432, 430, 432, 605, 514, 27, 481, 467, 849, 77, 992, 882, 141, 804, 269, 389,
                399, 640, 676, 104, 36, 376, 117, 918, 196, 793, 456, 278, 803, 466, 916, 445, 547, 167, 144, 628, 514, 889, 388, 960, 925,
                322, 168, 115, 227, 32, 321, 542, 752, 256, 562, 611, 651, 921, 889, 412, 150, 884, 536, 335, 80, 374, 185, 772, 678
                , 776, 735, 222, 581, 505, 459, 966, 678, 227, 697, 376, 386, 666, 848, 279, 846, 612, 800, 144, 863, 743, 233, 209, 461
                , 546, 640, 430, 915, 12, 960, 848, 162, 879, 33, 703, 289, 349, 322, 884, 913, 731, 288, 9, 250, 498, 517, 39, 426, 220
                , 345, 970, 693, 29, 295, 736, 330, 32, 902, 675, 884, 282, 889, 952, 973, 571, 617, 596, 242, 882, 744, 73, 153, 980, 963,
                904, 987, 371, 216, 440, 903, 837, 381, 250, 288, 489, 311, 470, 146, 910, 82, 654, 102, 853, 193, 796, 809, 384, 679, 753, 532, 557, 703, 584, 51, 536, 3, 804, 624, 731, 536, 422, 696, 287, 805, 219, 704, 865, 848, 284, 77, 881, 892, 451, 763, 288, 980, 510, 55, 804, 199, 816, 302, 490, 605, 196, 435, 320, 900, 229, 342, 889, 976, 13, 190, 735, 219, 877
                , 312, 250, 658, 657, 223, 94, 785, 920, 754, 854, 416, 782, 446, 965, 536, 219, 580, 386, 299, 538, 406, 996, 101, 795,
                727, 569, 804, 200, 435, 865, 976, 810, 503, 798, 153, 106, 991, 613, 1000, 789, 235, 740, 208, 578, 100, 252, 151, 16,
                378, 426, 986, 692, 356, 292, 44, 557, 141, 982, 219, 223, 242, 592, 536, 197, 92, 237, 618, 350, 187, 420, 438, 106, 99, 233, 65, 333, 439, 489, 575, 353, 504, 580, 475, 942, 520, 933, 347, 808, 59, 189, 38, 387, 451, 581, 551, 503, 945,
                712, 982, 597, 798, 762, 496, 130, 371, 814, 736, 656, 193, 466, 391, 88, 718, 278, 964, 102, 983, 170, 87, 814, 521, 757, 198, 917, 13, 304, 411, 796, 466, 656, 640, 560, 650, 628, 74, 633, 933, 484, 605, 692, 920, 82, 253, 630, 926, 838,
                651, 696, 810, 408, 207, 846, 414, 50, 77, 823, 44, 189, 349, 869, 884, 551, 608, 810, 534, 60, 224, 524, 944, 790, 875,
                310, 233, 862, 983, 829, 219, 461, 801, 882, 735, 158, 546, 774, 606, 715, 663, 877, 90, 61, 846, 657, 189, 506, 887, 748, 752, 604, 632, 319, 973, 904, 242, 416, 642, 493, 421, 79, 55, 571, 587, 786, 788, 153, 498, 693, 355, 443, 185, 505, 116, 104, 627, 859, 530, 984, 128, 579, 50, 960, 550, 216, 63, 99, 635, 174, 703, 636, 391, 107, 5, 171, 72, 990, 958,
                701, 786, 547, 276, 298, 475, 580, 345, 773, 104, 588, 246, 222, 30, 165, 137, 879, 395, 748, 805, 857, 700, 473, 805, 753, 996, 456, 881, 849, 742, 73, 19, 451, 39, 557, 307, 788, 879, 808, 757, 718, 465, 912, 178, 304, 334, 549, 580, 994
                , 295, 547, 288, 860, 899, 79, 536, 715, 406, 363, 789, 629, 633, 524, 346, 165, 873, 781, 710, 449, 553, 312, 562, 571,
                774, 494, 383, 542, 547, 191, 170, 915, 206, 371, 344, 199, 311, 292, 250, 624, 6, 294, 582, 790, 808, 602, 752, 610, 779,
                337, 447, 652, 288, 324, 480, 610, 189, 974, 703, 130, 282, 388, 220, 862, 911, 92, 148, 887, 563, 825, 853, 801, 407, 877, 389, 741, 429, 415, 628, 560, 362, 837, 885, 936, 705, 611, 442, 892, 596, 131, 752, 176, 943, 58, 428, 480, 752
                , 32, 17, 225, 669, 634, 924, 408, 589, 517, 425, 474, 704, 788, 864, 588, 33, 939, 237, 538, 371, 823, 456, 450, 478, 199, 940, 858, 904, 738, 641, 614, 249, 194, 410, 25, 545, 179, 637, 193, 43, 601, 579, 405, 611, 355, 440, 354, 702, 42,
                547, 620, 194, 353, 669, 246, 635, 78, 434, 997, 290, 141, 251, 364, 23, 710, 954, 943, 58, 986, 796, 351, 373, 440, 960, 8, 800, 72, 763, 808, 799, 860, 898, 432, 321, 560, 588, 945, 124, 581, 282, 30, 705, 837, 269, 524, 969, 757, 257, 405, 347, 366, 577, 810, 41, 581, 757, 939, 848, 857, 891, 524, 417, 605, 537, 407, 474, 233, 917, 214, 399, 356, 720, 230, 493, 987, 979, 174, 229, 579, 870, 455, 234, 398, 454, 988, 980, 637, 585, 344, 750, 391, 387, 939, 403, 691, 606, 737, 581, 808, 889, 456, 557, 939, 10, 355, 369, 613, 740, 684, 48, 790, 208, 959, 287, 462, 237, 121, 839, 371};

        long t1 = System.currentTimeMillis();
        d.bellmanFord(1, cost, parents);
        long t2 = System.currentTimeMillis();

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
        assertTrue(d.hasNegativeCycle());

        System.out.println("Time taken for bellman 1000 nodes: " + (t2-t1) + "ms");
    }
   @org.junit.Test
    public void floyd100Nodes()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        long t1 = System.currentTimeMillis();
        d.floydWarshall(cost, parents);
        long t2 = System.currentTimeMillis();

        assertTrue(d.hasNegativeCycle());
        System.out.println("Time taken for floyd 100 nodes: " + (t2-t1) + "ms");
    }

    @org.junit.Test
    public void floyd100NodesStressNoCycles()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        long t1 = System.currentTimeMillis();
        d.floydWarshall(cost, parents);
        long t2 = System.currentTimeMillis();

        assertTrue(d.hasNegativeCycle());
        System.out.println("Time taken for floyd 100 nodes " + (t2-t1) + "ms");
    }

    @org.junit.Test
    public void bellmanWithUnconnectedGraph()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +
                "\\src\\main\\java\\org\\example\\" + "undirected_positive_islands.txt");
        int[] cost = new int[d1.getSize()];
        int[]  parents = new int[d1.getSize()];
        d1.bellmanFord(0, cost, parents);

        int[] costSolution = new int[]{0, 100, 2, 104, 101, 1000000000, 1000000000,
                1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000};
        int[] parentSolution = new int[]{-1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void bellmanSmallArray()
    {
        Graph d2 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1.txt");
        int[] cost = new int[d2.getSize()];
        int[]  parents = new int[d2.getSize()];
        d2.bellmanFord(0, cost, parents);

        int[] costSolution = new int[]{0, 2, 4, 1, 5};
        int[] parentSolution = new int[]{-1, 0, 3, 0, 2};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void bellmanSmallArray2()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra2.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.bellmanFord(0, cost, parents);


        int[] costSolution = new int[]{0, 1000000000, 279, 200, 386, 248, 378, 389, 197, 524 };
        int[] parentSolution = new int[]{-1, 0, 3, 0, 8, 8, 5, 4, 0, 7};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void bellmanSmallArray3()
    {
        Graph d = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra5.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.bellmanFord(0, cost, parents);


        int[] costSolution = new int[]{0, 1, 2};
        int[] parentSolution = new int[]{-1, 0, 1};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void floydWithUnconnectedGraph()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +
                "\\src\\main\\java\\org\\example\\" + "undirected_positive_islands.txt");
        int[][] cost = new int[d1.getSize()][d1.getSize()];
        int[][]  parents = new int[d1.getSize()][d1.getSize()];
        d1.floydWarshall(cost, parents);

        int[][] costSolution = new int[][] {{0, 100, 2, 104, 101, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {100, 0, 102, 4, 1, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {2, 102, 0, 106, 103, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {104, 4, 106, 0, 3, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {101, 1, 103, 3, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1, 3, 3, 8, 7, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1, 0, 2, 2, 7, 6, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 3, 2, 0, 3, 8, 4, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 3, 2, 3, 0, 5, 7, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 8, 7, 8, 5, 0, 12, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 7, 6, 4, 7, 12, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1000000000, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1000000000, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1000000000, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0, 1000000000 },
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 0 }};

        int[][] parentSolution = new int[][] {{0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {1, 4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, {0, 0, 0, 0, 0, 0, 5, 6, 6, 8, 7, 0, 0, 0, 0, 0 },
                {0, 0, 0, 0, 0, 0, 0, 6, 6, 8, 7, 0, 0, 0, 0, 0 }, {0, 0, 0, 0, 0, 6, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0 },
                {0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0 }, {0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 8, 0, 0, 0, 0, 0 },
                {0, 0, 0, 0, 0, 7, 7, 10, 7, 8, 0, 0, 0, 0, 0, 0 }, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        };

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void floydSmallArray()
    {
        Graph d2 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra1.txt");
        int[][] cost = new int[d2.getSize()][d2.getSize()];
        int[][]  parents = new int[d2.getSize()][d2.getSize()];
        d2.floydWarshall(cost, parents);

        int[][] costSolution = new int[][] {{0, 2, 4, 1, 5 }, {2, 0, 4, 3, 5 }, {4, 4, 0, 3, 1 }, {1, 3, 3, 0, 4 }, {5, 5, 1, 4, 0 }};
        int[][] parentSolution = new int[][] {{0, 0, 3, 0, 3 }, {0, 0, 1, 0, 1 }, {3, 0, 0, 0, 2 }, {0, 0, 3, 0, 2 }, {3, 0, 0, 2, 0 }};

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }
    @org.junit.Test
    public void floydSmallArray2()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra2.txt");
        int[][] cost = new int[d1.getSize()][d1.getSize()];
        int[][]  parents = new int[d1.getSize()][d1.getSize()];
        d1.floydWarshall(cost, parents);

        int[][] costSolution = new int[][] {{0, 1000000000, 279, 200, 386, 248, 378, 389, 197, 524 },
                {1000000000, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 },
                {279, 1000000000, 0, 79, 213, 149, 279, 216, 200, 351 }, {200, 1000000000, 79, 0, 292, 228, 358, 295, 279, 430 },
                {386, 1000000000, 213, 292, 0, 240, 370, 3, 189, 138 }, {248, 1000000000, 149, 228, 240, 0, 130, 243, 51, 378 },
                {378, 1000000000, 279, 358, 370, 130, 0, 373, 181, 508 }, {389, 1000000000, 216, 295, 3, 243, 373, 0, 192, 135 },
                {197, 1000000000, 200, 279, 189, 51, 181, 192, 0, 327 }, {524, 1000000000, 351, 430, 138, 378, 508, 135, 327, 0 }};

        int[][] parentSolution = new int[][] {{0, 0, 3, 0, 8, 8, 8, 8, 0, 8 }, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {3, 0, 0, 2, 2, 2, 5, 4, 5, 7 }, {0, 0, 0, 0, 2, 2, 5, 4, 5, 7 },
                {8, 0, 0, 2, 0, 8, 8, 4, 4, 7 }, {8, 0, 0, 2, 8, 0, 5, 8, 5, 8 },
                {8, 0, 5, 5, 8, 0, 0, 8, 5, 8 }, {8, 0, 4, 4, 0, 8, 8, 0, 4, 7 },
                {0, 0, 5, 5, 0, 0, 5, 4, 0, 7 }, {8, 0, 7, 7, 7, 8, 8, 0, 7, 0 }
        };

        assertArrayEquals(costSolution, cost);
        assertArrayEquals(parentSolution, parents);
    }

    @org.junit.Test
    public void floydSmallArray3()
    {
        Graph d1 = new Graph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "dijkstra5.txt");
        int[][] cost = new int[d1.getSize()][d1.getSize()];
        int[][]  parents = new int[d1.getSize()][d1.getSize()];
        d1.floydWarshall(cost, parents);
        int[][] costSolution = new int[][]{{0, 1, 2}, {1, 0, 1}, {2, 1, 0}};
        int[][] parentSolution = new int[][]{{0, 0, 1}, {1, 0, 1}, {1, 2, 0}};
        assertTrue(Arrays.deepEquals(costSolution, cost));
        assertTrue(Arrays.deepEquals(parentSolution, parents));
    }

    @org.junit.Test
    public void hasNegativeCycleBellman() {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];
        d.bellmanFord(1, cost, parents);
        assertTrue(d.hasNegativeCycle());
    }

    @org.junit.Test
    public void hasNegativeCycleBellman2()
    {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[] cost = new int[d.getSize()];
        int[]  parents = new int[d.getSize()];

        d.bellmanFord(1, cost, parents);

        assertFalse(d.hasNegativeCycle());
    }

    @org.junit.Test
    public void hasNegativeCycleFloyd() {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesWithNegativeEdges.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        d.floydWarshall(cost, parents);
        assertTrue(d.hasNegativeCycle());
    }

    @org.junit.Test
    public void hasNegativeCycleFloyd2()
    {
        Graph d = new DirectedGraph(System.getProperty("user.dir") +  "\\src\\main\\java\\org\\example\\" + "100NodesNegativeEdgesNoCycles.txt");
        int[][] cost = new int[d.getSize()][d.getSize()];
        int[][]  parents = new int[d.getSize()][d.getSize()];

        d.floydWarshall(cost, parents);
        assertFalse(d.hasNegativeCycle());
    }
}